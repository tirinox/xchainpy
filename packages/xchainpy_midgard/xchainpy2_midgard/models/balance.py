# coding: utf-8

"""
    Midgard Public API

    The Midgard Public API queries THORChain and any chains linked via the Bifr√∂st and prepares information about the network to be readily available for public users. The API parses transaction event data from THORChain and stores them in a time-series database to make time-dependent queries easy. Midgard does not hold critical information. To interact with THORChain protocol, users should query THORNode directly.  # noqa: E501

    OpenAPI spec version: 2.18.2
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Balance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coins': 'Coins',
        '_date': 'str',
        'height': 'str'
    }

    attribute_map = {
        'coins': 'coins',
        '_date': 'date',
        'height': 'height'
    }

    def __init__(self, coins=None, _date=None, height=None):  # noqa: E501
        """Balance - a model defined in Swagger"""  # noqa: E501
        self._coins = None
        self.__date = None
        self._height = None
        self.discriminator = None
        self.coins = coins
        self._date = _date
        self.height = height

    @property
    def coins(self):
        """Gets the coins of this Balance.  # noqa: E501


        :return: The coins of this Balance.  # noqa: E501
        :rtype: Coins
        """
        return self._coins

    @coins.setter
    def coins(self, coins):
        """Sets the coins of this Balance.


        :param coins: The coins of this Balance.  # noqa: E501
        :type: Coins
        """
        if coins is None:
            raise ValueError("Invalid value for `coins`, must not be `None`")  # noqa: E501

        self._coins = coins

    @property
    def _date(self):
        """Gets the _date of this Balance.  # noqa: E501

        full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid  # noqa: E501

        :return: The _date of this Balance.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Balance.

        full timestamp (nanoseconds since 1970) of the block at which the returned balance snapshot was valid  # noqa: E501

        :param _date: The _date of this Balance.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def height(self):
        """Gets the height of this Balance.  # noqa: E501

        height of the block at which the returned balance snapshot was valid  # noqa: E501

        :return: The height of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Balance.

        height of the block at which the returned balance snapshot was valid  # noqa: E501

        :param height: The height of this Balance.  # noqa: E501
        :type: str
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Balance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
