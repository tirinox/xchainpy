# coding: utf-8

"""
    Mayanode API

    Mayanode REST API.  # noqa: E501

    OpenAPI spec version: 1.107.3
    Contact: devs@mayachain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Bucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance_asset': 'str',
        'asset': 'str',
        'lp_units': 'str',
        'status': 'str'
    }

    attribute_map = {
        'balance_asset': 'balance_asset',
        'asset': 'asset',
        'lp_units': 'LP_units',
        'status': 'status'
    }

    def __init__(self, balance_asset=None, asset=None, lp_units=None, status=None):  # noqa: E501
        """Bucket - a model defined in Swagger"""  # noqa: E501
        self._balance_asset = None
        self._asset = None
        self._lp_units = None
        self._status = None
        self.discriminator = None
        self.balance_asset = balance_asset
        self.asset = asset
        self.lp_units = lp_units
        self.status = status

    @property
    def balance_asset(self):
        """Gets the balance_asset of this Bucket.  # noqa: E501


        :return: The balance_asset of this Bucket.  # noqa: E501
        :rtype: str
        """
        return self._balance_asset

    @balance_asset.setter
    def balance_asset(self, balance_asset):
        """Sets the balance_asset of this Bucket.


        :param balance_asset: The balance_asset of this Bucket.  # noqa: E501
        :type: str
        """
        if balance_asset is None:
            raise ValueError("Invalid value for `balance_asset`, must not be `None`")  # noqa: E501

        self._balance_asset = balance_asset

    @property
    def asset(self):
        """Gets the asset of this Bucket.  # noqa: E501


        :return: The asset of this Bucket.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Bucket.


        :param asset: The asset of this Bucket.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def lp_units(self):
        """Gets the lp_units of this Bucket.  # noqa: E501

        the total pool liquidity provider units  # noqa: E501

        :return: The lp_units of this Bucket.  # noqa: E501
        :rtype: str
        """
        return self._lp_units

    @lp_units.setter
    def lp_units(self, lp_units):
        """Sets the lp_units of this Bucket.

        the total pool liquidity provider units  # noqa: E501

        :param lp_units: The lp_units of this Bucket.  # noqa: E501
        :type: str
        """
        if lp_units is None:
            raise ValueError("Invalid value for `lp_units`, must not be `None`")  # noqa: E501

        self._lp_units = lp_units

    @property
    def status(self):
        """Gets the status of this Bucket.  # noqa: E501


        :return: The status of this Bucket.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Bucket.


        :param status: The status of this Bucket.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
