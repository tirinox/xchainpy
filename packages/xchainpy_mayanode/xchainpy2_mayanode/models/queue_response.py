# coding: utf-8

"""
    Mayanode API

    Mayanode REST API.  # noqa: E501

    OpenAPI spec version: 1.107.3
    Contact: devs@mayachain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'swap': 'int',
        'outbound': 'int',
        'internal': 'int',
        'scheduled_outbound_value': 'str'
    }

    attribute_map = {
        'swap': 'swap',
        'outbound': 'outbound',
        'internal': 'internal',
        'scheduled_outbound_value': 'scheduled_outbound_value'
    }

    def __init__(self, swap=None, outbound=None, internal=None, scheduled_outbound_value=None):  # noqa: E501
        """QueueResponse - a model defined in Swagger"""  # noqa: E501
        self._swap = None
        self._outbound = None
        self._internal = None
        self._scheduled_outbound_value = None
        self.discriminator = None
        self.swap = swap
        self.outbound = outbound
        self.internal = internal
        self.scheduled_outbound_value = scheduled_outbound_value

    @property
    def swap(self):
        """Gets the swap of this QueueResponse.  # noqa: E501


        :return: The swap of this QueueResponse.  # noqa: E501
        :rtype: int
        """
        return self._swap

    @swap.setter
    def swap(self, swap):
        """Sets the swap of this QueueResponse.


        :param swap: The swap of this QueueResponse.  # noqa: E501
        :type: int
        """
        if swap is None:
            raise ValueError("Invalid value for `swap`, must not be `None`")  # noqa: E501

        self._swap = swap

    @property
    def outbound(self):
        """Gets the outbound of this QueueResponse.  # noqa: E501

        number of signed outbound tx in the queue  # noqa: E501

        :return: The outbound of this QueueResponse.  # noqa: E501
        :rtype: int
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound):
        """Sets the outbound of this QueueResponse.

        number of signed outbound tx in the queue  # noqa: E501

        :param outbound: The outbound of this QueueResponse.  # noqa: E501
        :type: int
        """
        if outbound is None:
            raise ValueError("Invalid value for `outbound`, must not be `None`")  # noqa: E501

        self._outbound = outbound

    @property
    def internal(self):
        """Gets the internal of this QueueResponse.  # noqa: E501


        :return: The internal of this QueueResponse.  # noqa: E501
        :rtype: int
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this QueueResponse.


        :param internal: The internal of this QueueResponse.  # noqa: E501
        :type: int
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")  # noqa: E501

        self._internal = internal

    @property
    def scheduled_outbound_value(self):
        """Gets the scheduled_outbound_value of this QueueResponse.  # noqa: E501

        scheduled outbound value in RUNE  # noqa: E501

        :return: The scheduled_outbound_value of this QueueResponse.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_outbound_value

    @scheduled_outbound_value.setter
    def scheduled_outbound_value(self, scheduled_outbound_value):
        """Sets the scheduled_outbound_value of this QueueResponse.

        scheduled outbound value in RUNE  # noqa: E501

        :param scheduled_outbound_value: The scheduled_outbound_value of this QueueResponse.  # noqa: E501
        :type: str
        """
        if scheduled_outbound_value is None:
            raise ValueError("Invalid value for `scheduled_outbound_value`, must not be `None`")  # noqa: E501

        self._scheduled_outbound_value = scheduled_outbound_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
