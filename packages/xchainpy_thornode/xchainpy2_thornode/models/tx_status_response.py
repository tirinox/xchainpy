# coding: utf-8

"""
    Thornode API

    Thornode REST API.  # noqa: E501

    OpenAPI spec version: 1.125.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TxStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tx': 'Tx',
        'planned_out_txs': 'list[TxStatusResponsePlannedOutTxs]',
        'out_txs': 'list[Tx]',
        'stages': 'TxStagesResponse'
    }

    attribute_map = {
        'tx': 'tx',
        'planned_out_txs': 'planned_out_txs',
        'out_txs': 'out_txs',
        'stages': 'stages'
    }

    def __init__(self, tx=None, planned_out_txs=None, out_txs=None, stages=None):  # noqa: E501
        """TxStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._tx = None
        self._planned_out_txs = None
        self._out_txs = None
        self._stages = None
        self.discriminator = None
        if tx is not None:
            self.tx = tx
        if planned_out_txs is not None:
            self.planned_out_txs = planned_out_txs
        if out_txs is not None:
            self.out_txs = out_txs
        self.stages = stages

    @property
    def tx(self):
        """Gets the tx of this TxStatusResponse.  # noqa: E501


        :return: The tx of this TxStatusResponse.  # noqa: E501
        :rtype: Tx
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this TxStatusResponse.


        :param tx: The tx of this TxStatusResponse.  # noqa: E501
        :type: Tx
        """

        self._tx = tx

    @property
    def planned_out_txs(self):
        """Gets the planned_out_txs of this TxStatusResponse.  # noqa: E501


        :return: The planned_out_txs of this TxStatusResponse.  # noqa: E501
        :rtype: list[TxStatusResponsePlannedOutTxs]
        """
        return self._planned_out_txs

    @planned_out_txs.setter
    def planned_out_txs(self, planned_out_txs):
        """Sets the planned_out_txs of this TxStatusResponse.


        :param planned_out_txs: The planned_out_txs of this TxStatusResponse.  # noqa: E501
        :type: list[TxStatusResponsePlannedOutTxs]
        """

        self._planned_out_txs = planned_out_txs

    @property
    def out_txs(self):
        """Gets the out_txs of this TxStatusResponse.  # noqa: E501


        :return: The out_txs of this TxStatusResponse.  # noqa: E501
        :rtype: list[Tx]
        """
        return self._out_txs

    @out_txs.setter
    def out_txs(self, out_txs):
        """Sets the out_txs of this TxStatusResponse.


        :param out_txs: The out_txs of this TxStatusResponse.  # noqa: E501
        :type: list[Tx]
        """

        self._out_txs = out_txs

    @property
    def stages(self):
        """Gets the stages of this TxStatusResponse.  # noqa: E501


        :return: The stages of this TxStatusResponse.  # noqa: E501
        :rtype: TxStagesResponse
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this TxStatusResponse.


        :param stages: The stages of this TxStatusResponse.  # noqa: E501
        :type: TxStagesResponse
        """
        if stages is None:
            raise ValueError("Invalid value for `stages`, must not be `None`")  # noqa: E501

        self._stages = stages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TxStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TxStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
