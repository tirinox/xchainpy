# coding: utf-8

"""
    Thornode API

    Thornode REST API.  # noqa: E501

    OpenAPI spec version: 1.132.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'pool_slip': 'int',
        'rollup_count': 'int',
        'long_rollup': 'int',
        'rollup': 'int',
        'summed_rollup': 'int'
    }

    attribute_map = {
        'asset': 'asset',
        'pool_slip': 'pool_slip',
        'rollup_count': 'rollup_count',
        'long_rollup': 'long_rollup',
        'rollup': 'rollup',
        'summed_rollup': 'summed_rollup'
    }

    def __init__(self, asset=None, pool_slip=None, rollup_count=None, long_rollup=None, rollup=None, summed_rollup=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._pool_slip = None
        self._rollup_count = None
        self._long_rollup = None
        self._rollup = None
        self._summed_rollup = None
        self.discriminator = None
        self.asset = asset
        self.pool_slip = pool_slip
        self.rollup_count = rollup_count
        self.long_rollup = long_rollup
        self.rollup = rollup
        if summed_rollup is not None:
            self.summed_rollup = summed_rollup

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200.  # noqa: E501


        :return: The asset of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200.


        :param asset: The asset of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def pool_slip(self):
        """Gets the pool_slip of this InlineResponse200.  # noqa: E501

        Pool slip for this asset's pool for the current height  # noqa: E501

        :return: The pool_slip of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._pool_slip

    @pool_slip.setter
    def pool_slip(self, pool_slip):
        """Sets the pool_slip of this InlineResponse200.

        Pool slip for this asset's pool for the current height  # noqa: E501

        :param pool_slip: The pool_slip of this InlineResponse200.  # noqa: E501
        :type: int
        """
        if pool_slip is None:
            raise ValueError("Invalid value for `pool_slip`, must not be `None`")  # noqa: E501

        self._pool_slip = pool_slip

    @property
    def rollup_count(self):
        """Gets the rollup_count of this InlineResponse200.  # noqa: E501

        Number of stored pool slips contributing to the current stored rollup  # noqa: E501

        :return: The rollup_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._rollup_count

    @rollup_count.setter
    def rollup_count(self, rollup_count):
        """Sets the rollup_count of this InlineResponse200.

        Number of stored pool slips contributing to the current stored rollup  # noqa: E501

        :param rollup_count: The rollup_count of this InlineResponse200.  # noqa: E501
        :type: int
        """
        if rollup_count is None:
            raise ValueError("Invalid value for `rollup_count`, must not be `None`")  # noqa: E501

        self._rollup_count = rollup_count

    @property
    def long_rollup(self):
        """Gets the long_rollup of this InlineResponse200.  # noqa: E501

        Median of rollup snapshots over a long period  # noqa: E501

        :return: The long_rollup of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._long_rollup

    @long_rollup.setter
    def long_rollup(self, long_rollup):
        """Sets the long_rollup of this InlineResponse200.

        Median of rollup snapshots over a long period  # noqa: E501

        :param long_rollup: The long_rollup of this InlineResponse200.  # noqa: E501
        :type: int
        """
        if long_rollup is None:
            raise ValueError("Invalid value for `long_rollup`, must not be `None`")  # noqa: E501

        self._long_rollup = long_rollup

    @property
    def rollup(self):
        """Gets the rollup of this InlineResponse200.  # noqa: E501

        Stored sum of pool slips over a number of previous block heights  # noqa: E501

        :return: The rollup of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._rollup

    @rollup.setter
    def rollup(self, rollup):
        """Sets the rollup of this InlineResponse200.

        Stored sum of pool slips over a number of previous block heights  # noqa: E501

        :param rollup: The rollup of this InlineResponse200.  # noqa: E501
        :type: int
        """
        if rollup is None:
            raise ValueError("Invalid value for `rollup`, must not be `None`")  # noqa: E501

        self._rollup = rollup

    @property
    def summed_rollup(self):
        """Gets the summed_rollup of this InlineResponse200.  # noqa: E501

        Summed pool slips over a number of previous block heights, to checksum the stored rollup  # noqa: E501

        :return: The summed_rollup of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._summed_rollup

    @summed_rollup.setter
    def summed_rollup(self, summed_rollup):
        """Sets the summed_rollup of this InlineResponse200.

        Summed pool slips over a number of previous block heights, to checksum the stored rollup  # noqa: E501

        :param summed_rollup: The summed_rollup of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._summed_rollup = summed_rollup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
