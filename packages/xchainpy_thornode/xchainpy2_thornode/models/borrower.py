# coding: utf-8

"""
    Thornode API

    Thornode REST API.  # noqa: E501

    OpenAPI spec version: 1.110.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Borrower(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'asset': 'str',
        'debt_up': 'str',
        'debt_down': 'str',
        'collateral_up': 'str',
        'collateral_down': 'str',
        'last_open_height': 'int',
        'last_repay_height': 'int'
    }

    attribute_map = {
        'owner': 'owner',
        'asset': 'asset',
        'debt_up': 'debt_up',
        'debt_down': 'debt_down',
        'collateral_up': 'collateral_up',
        'collateral_down': 'collateral_down',
        'last_open_height': 'last_open_height',
        'last_repay_height': 'last_repay_height'
    }

    def __init__(self, owner=None, asset=None, debt_up=None, debt_down=None, collateral_up=None, collateral_down=None, last_open_height=None, last_repay_height=None):  # noqa: E501
        """Borrower - a model defined in Swagger"""  # noqa: E501
        self._owner = None
        self._asset = None
        self._debt_up = None
        self._debt_down = None
        self._collateral_up = None
        self._collateral_down = None
        self._last_open_height = None
        self._last_repay_height = None
        self.discriminator = None
        self.owner = owner
        self.asset = asset
        self.debt_up = debt_up
        self.debt_down = debt_down
        self.collateral_up = collateral_up
        self.collateral_down = collateral_down
        self.last_open_height = last_open_height
        self.last_repay_height = last_repay_height

    @property
    def owner(self):
        """Gets the owner of this Borrower.  # noqa: E501


        :return: The owner of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Borrower.


        :param owner: The owner of this Borrower.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def asset(self):
        """Gets the asset of this Borrower.  # noqa: E501


        :return: The asset of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Borrower.


        :param asset: The asset of this Borrower.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def debt_up(self):
        """Gets the debt_up of this Borrower.  # noqa: E501


        :return: The debt_up of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._debt_up

    @debt_up.setter
    def debt_up(self, debt_up):
        """Sets the debt_up of this Borrower.


        :param debt_up: The debt_up of this Borrower.  # noqa: E501
        :type: str
        """
        if debt_up is None:
            raise ValueError("Invalid value for `debt_up`, must not be `None`")  # noqa: E501

        self._debt_up = debt_up

    @property
    def debt_down(self):
        """Gets the debt_down of this Borrower.  # noqa: E501


        :return: The debt_down of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._debt_down

    @debt_down.setter
    def debt_down(self, debt_down):
        """Sets the debt_down of this Borrower.


        :param debt_down: The debt_down of this Borrower.  # noqa: E501
        :type: str
        """
        if debt_down is None:
            raise ValueError("Invalid value for `debt_down`, must not be `None`")  # noqa: E501

        self._debt_down = debt_down

    @property
    def collateral_up(self):
        """Gets the collateral_up of this Borrower.  # noqa: E501


        :return: The collateral_up of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._collateral_up

    @collateral_up.setter
    def collateral_up(self, collateral_up):
        """Sets the collateral_up of this Borrower.


        :param collateral_up: The collateral_up of this Borrower.  # noqa: E501
        :type: str
        """
        if collateral_up is None:
            raise ValueError("Invalid value for `collateral_up`, must not be `None`")  # noqa: E501

        self._collateral_up = collateral_up

    @property
    def collateral_down(self):
        """Gets the collateral_down of this Borrower.  # noqa: E501


        :return: The collateral_down of this Borrower.  # noqa: E501
        :rtype: str
        """
        return self._collateral_down

    @collateral_down.setter
    def collateral_down(self, collateral_down):
        """Sets the collateral_down of this Borrower.


        :param collateral_down: The collateral_down of this Borrower.  # noqa: E501
        :type: str
        """
        if collateral_down is None:
            raise ValueError("Invalid value for `collateral_down`, must not be `None`")  # noqa: E501

        self._collateral_down = collateral_down

    @property
    def last_open_height(self):
        """Gets the last_open_height of this Borrower.  # noqa: E501


        :return: The last_open_height of this Borrower.  # noqa: E501
        :rtype: int
        """
        return self._last_open_height

    @last_open_height.setter
    def last_open_height(self, last_open_height):
        """Sets the last_open_height of this Borrower.


        :param last_open_height: The last_open_height of this Borrower.  # noqa: E501
        :type: int
        """
        if last_open_height is None:
            raise ValueError("Invalid value for `last_open_height`, must not be `None`")  # noqa: E501

        self._last_open_height = last_open_height

    @property
    def last_repay_height(self):
        """Gets the last_repay_height of this Borrower.  # noqa: E501


        :return: The last_repay_height of this Borrower.  # noqa: E501
        :rtype: int
        """
        return self._last_repay_height

    @last_repay_height.setter
    def last_repay_height(self, last_repay_height):
        """Sets the last_repay_height of this Borrower.


        :param last_repay_height: The last_repay_height of this Borrower.  # noqa: E501
        :type: int
        """
        if last_repay_height is None:
            raise ValueError("Invalid value for `last_repay_height`, must not be `None`")  # noqa: E501

        self._last_repay_height = last_repay_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Borrower, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Borrower):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
