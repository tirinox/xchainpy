# coding: utf-8

"""
    Thornode API

    Thornode REST API.  # noqa: E501

    OpenAPI spec version: 1.132.0
    Contact: devs@thorchain.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OutboundFee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'outbound_fee': 'str',
        'fee_withheld_rune': 'str',
        'fee_spent_rune': 'str',
        'surplus_rune': 'str',
        'dynamic_multiplier_basis_points': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'outbound_fee': 'outbound_fee',
        'fee_withheld_rune': 'fee_withheld_rune',
        'fee_spent_rune': 'fee_spent_rune',
        'surplus_rune': 'surplus_rune',
        'dynamic_multiplier_basis_points': 'dynamic_multiplier_basis_points'
    }

    def __init__(self, asset=None, outbound_fee=None, fee_withheld_rune=None, fee_spent_rune=None, surplus_rune=None, dynamic_multiplier_basis_points=None):  # noqa: E501
        """OutboundFee - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._outbound_fee = None
        self._fee_withheld_rune = None
        self._fee_spent_rune = None
        self._surplus_rune = None
        self._dynamic_multiplier_basis_points = None
        self.discriminator = None
        self.asset = asset
        self.outbound_fee = outbound_fee
        if fee_withheld_rune is not None:
            self.fee_withheld_rune = fee_withheld_rune
        if fee_spent_rune is not None:
            self.fee_spent_rune = fee_spent_rune
        if surplus_rune is not None:
            self.surplus_rune = surplus_rune
        if dynamic_multiplier_basis_points is not None:
            self.dynamic_multiplier_basis_points = dynamic_multiplier_basis_points

    @property
    def asset(self):
        """Gets the asset of this OutboundFee.  # noqa: E501

        the asset to display the outbound fee for  # noqa: E501

        :return: The asset of this OutboundFee.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this OutboundFee.

        the asset to display the outbound fee for  # noqa: E501

        :param asset: The asset of this OutboundFee.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def outbound_fee(self):
        """Gets the outbound_fee of this OutboundFee.  # noqa: E501

        the asset's outbound fee, in (1e8-format) units of the asset  # noqa: E501

        :return: The outbound_fee of this OutboundFee.  # noqa: E501
        :rtype: str
        """
        return self._outbound_fee

    @outbound_fee.setter
    def outbound_fee(self, outbound_fee):
        """Sets the outbound_fee of this OutboundFee.

        the asset's outbound fee, in (1e8-format) units of the asset  # noqa: E501

        :param outbound_fee: The outbound_fee of this OutboundFee.  # noqa: E501
        :type: str
        """
        if outbound_fee is None:
            raise ValueError("Invalid value for `outbound_fee`, must not be `None`")  # noqa: E501

        self._outbound_fee = outbound_fee

    @property
    def fee_withheld_rune(self):
        """Gets the fee_withheld_rune of this OutboundFee.  # noqa: E501

        Total RUNE the network has withheld as fees to later cover gas costs for this asset's outbounds  # noqa: E501

        :return: The fee_withheld_rune of this OutboundFee.  # noqa: E501
        :rtype: str
        """
        return self._fee_withheld_rune

    @fee_withheld_rune.setter
    def fee_withheld_rune(self, fee_withheld_rune):
        """Sets the fee_withheld_rune of this OutboundFee.

        Total RUNE the network has withheld as fees to later cover gas costs for this asset's outbounds  # noqa: E501

        :param fee_withheld_rune: The fee_withheld_rune of this OutboundFee.  # noqa: E501
        :type: str
        """

        self._fee_withheld_rune = fee_withheld_rune

    @property
    def fee_spent_rune(self):
        """Gets the fee_spent_rune of this OutboundFee.  # noqa: E501

        Total RUNE the network has spent to reimburse gas costs for this asset's outbounds  # noqa: E501

        :return: The fee_spent_rune of this OutboundFee.  # noqa: E501
        :rtype: str
        """
        return self._fee_spent_rune

    @fee_spent_rune.setter
    def fee_spent_rune(self, fee_spent_rune):
        """Sets the fee_spent_rune of this OutboundFee.

        Total RUNE the network has spent to reimburse gas costs for this asset's outbounds  # noqa: E501

        :param fee_spent_rune: The fee_spent_rune of this OutboundFee.  # noqa: E501
        :type: str
        """

        self._fee_spent_rune = fee_spent_rune

    @property
    def surplus_rune(self):
        """Gets the surplus_rune of this OutboundFee.  # noqa: E501

        amount of RUNE by which the fee_withheld_rune exceeds the fee_spent_rune  # noqa: E501

        :return: The surplus_rune of this OutboundFee.  # noqa: E501
        :rtype: str
        """
        return self._surplus_rune

    @surplus_rune.setter
    def surplus_rune(self, surplus_rune):
        """Sets the surplus_rune of this OutboundFee.

        amount of RUNE by which the fee_withheld_rune exceeds the fee_spent_rune  # noqa: E501

        :param surplus_rune: The surplus_rune of this OutboundFee.  # noqa: E501
        :type: str
        """

        self._surplus_rune = surplus_rune

    @property
    def dynamic_multiplier_basis_points(self):
        """Gets the dynamic_multiplier_basis_points of this OutboundFee.  # noqa: E501

        dynamic multiplier basis points, based on the surplus_rune, affecting the size of the outbound_fee  # noqa: E501

        :return: The dynamic_multiplier_basis_points of this OutboundFee.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_multiplier_basis_points

    @dynamic_multiplier_basis_points.setter
    def dynamic_multiplier_basis_points(self, dynamic_multiplier_basis_points):
        """Sets the dynamic_multiplier_basis_points of this OutboundFee.

        dynamic multiplier basis points, based on the surplus_rune, affecting the size of the outbound_fee  # noqa: E501

        :param dynamic_multiplier_basis_points: The dynamic_multiplier_basis_points of this OutboundFee.  # noqa: E501
        :type: str
        """

        self._dynamic_multiplier_basis_points = dynamic_multiplier_basis_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutboundFee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutboundFee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
