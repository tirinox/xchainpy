.. XChainPy2 documentation master file, created by
   sphinx-quickstart on Sun May  5 12:05:17 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to XChainPy2's documentation!
=====================================

**XChainPy2** is a collection of Python libraries for interacting with various blockchains. It is a freestyle port of XChainJS library,
which was written in JavaScript. The goal of XChainPy2 is to provide a simple, consistent interface for interacting with different blockchains, making it easy to build cross-chain applications.

.. danger::
   XChainPy2 is still in development and should be considered alpha software.
   If you intend to use the library for real funds, do so with great caution!
   **Disclaimer. The authors is not responsible for lost funds!**

.. warning::
   This documentation is also in development and may not be complete or accurate. Please refer to the source code for the most up-to-date information.


Quick Start example
-------------------

See how easy it is to swap assets using XChainPy2:

.. literalinclude:: ./examples/amm_swap.py
   :language: python

Modular design
--------------

The library is designed to be modular, so you can use only the parts you need.

.. _Binance sunset: https://www.bnbchain.org/en/bnb-chain-fusion

It contains the following modules:

1. :mod:`xchainpy2_utlis` - A collection of utility functions and classes. It also has widely used Asset, Amount and CryptoAmount classes.
3. :mod:`xchainpy2_crypto` - A collection of cryptographic functions. Keystore, mnemonic, etc.
4. :mod:`xchainpy2_thorchain` - THORChain client module.
5. :mod:`xchainpy2_thorchain_query` - THORChain query module to access the APIs and quote swaps.
6. :mod:`xchainpy2_thorchain_amm` - THORChain AMM allows you to perform swap, liquidity actions and all other ThorFi stuff.
7. :mod:`xchainpy2_ethereum` - Ethereum client module.
8. :mod:`xchainpy2_arbitrum` - Arbitrum client module.
9. :mod:`xchainpy2_avalanche` - Avalanche client module.
10. :mod:`xchainpy2_bsc` - Binance Smart Chain client module.
11. :mod:`xchainpy2_bitcoin` - Bitcoin client module.
12. :mod:`xchainpy2_litecoin` - Litecoin client module.
13. :mod:`xchainpy2_dogecoin` - Dogecoin client module.
14. :mod:`xchainpy2_bitcoincash` - Bitcoin Cash client module.
15. :mod:`xchainpy2_cosmos` - Cosmos client module.
16. :mod:`xchainpy2_mayachain` - MayaChain client module.
17. :mod:`xchainpy2_mayanode` - MayaNode client module. Autogenerated from MayaNode API.
18. :mod:`xchainpy2_thornoode` - ThorNode client module. Autogenerated from ThorNode API.
19. :mod:`xchainpy2_midgard` - Midgard client module. Autogenerated from Midgard API.
20. :mod:`xchainpy2_binance` - Binance client module. Depreciated! (See: `Binance sunset`_)
21. :mod:`xchainpy2_client` - Base class for blockchain clients. It provides a common interface for interacting with different blockchains. Normally, you will not use this module directly, but use the specific blockchain client modules.
22. :mod:`xchainpy2_utxo_providers` - This module is currently unused. UTXO providers come from the *bitcoinlib* library.

.. toctree::
   :maxdepth: 2
   :caption: Contents:
   :numbered:

   self
   install.rst
   packages/xchainpy2_utils.rst
   packages/xchainpy2_crypto.rst
   packages/xchainpy2_thorchain.rst
   packages/xchainpy2_thorchain_query.rst
   packages/xchainpy2_thorchain_amm.rst
   packages/xchainpy2_mayachain.rst
   packages/xchainpy2_thornode.rst
   packages/xchainpy2_mayanode.rst
   packages/xchainpy2_ethereum.rst
   packages/xchainpy2_arbitrum.rst
   packages/xchainpy2_avalanche.rst
   packages/xchainpy2_bsc.rst
   packages/xchainpy2_bitcoin.rst
   packages/xchainpy2_litecoin.rst
   packages/xchainpy2_dogecoin.rst
   packages/xchainpy2_bitcoincash.rst
   packages/xchainpy2_cosmos.rst
   packages/xchainpy2_binance.rst
   packages/xchainpy2_midgard.rst
   packages/xchainpy2_utxo_providers.rst
