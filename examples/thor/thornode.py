"""
This example shows how to use xchainpy2_thornode and xchainpy2_mayanode
They are both autogenerated from Swagger Specs
So they don't have features like retrying, user agent overriding, backup hosts, etc.
Use xchainpy2_thorchain_query instead as it is advanced interface to Node and Midgard
"""
import asyncio

import xchainpy2_thornode as thor
from xchainpy2_thorchain_query import URLs


async def try_thornode():
    api_client = thor.ApiClient()
    api_client.configuration.host = URLs.THORNode.MAINNET

    t_pool_api = thor.PoolsApi(api_client)
    r = await t_pool_api.pools()
    print(f"{type(r)}: {r}")

    mimir = thor.MimirApi(api_client)
    r = await mimir.mimir()
    print(f"{type(r)}: {r}")

    pol = thor.RUNEPoolApi(api_client)
    r = await pol.rune_pool()
    print(f"{type(r)}: {r}")

    await api_client.rest_client.pool_manager.close()


async def main():
    await try_thornode()


if __name__ == '__main__':
    asyncio.run(main())
